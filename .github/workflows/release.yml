# GitHub Actions workflow for building, versioning, and releasing tfprettyplan
name: Build and Release

# Trigger the workflow on:
# 1. Push to main branch
# 2. Push of version tags (v*)
# 3. Manual workflow dispatch with release type selection
on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      should_release: ${{ steps.check-release.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release is needed
        id: check-release
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" && ! "${{ github.event.head_commit.message }}" =~ ^\[skip\ release\] ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.check-release.outputs.should_release == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install semantic-release dependencies
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator conventional-changelog-cli

      - name: Determine version
        id: set-version
        if: steps.check-release.outputs.should_release == 'true'
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION="${{ github.ref_name }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            
            # Remove the 'v' prefix
            LATEST_VERSION=${LATEST_TAG#v}
            
            # Split the version into components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            
            # Increment version based on input
            if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            
            VERSION="v$MAJOR.$MINOR.$PATCH"
          else
            # Create a minimal semantic-release config for Go projects (no npm)
            echo '{
              "plugins": [
                "@semantic-release/commit-analyzer",
                "@semantic-release/release-notes-generator"
              ],
              "npm": false,
              "ci": false
            }' > .releaserc.json
            
            # Automatic semantic versioning based on conventional commits
            # Pass GITHUB_TOKEN to avoid authentication errors
            VERSION=$(GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" npx semantic-release --dry-run --no-ci | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.1")
            VERSION="v$VERSION"
            
            # Remove temporary config file
            rm -f .releaserc.json
          fi
          
          echo "Determined version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  generate-changelog:
    needs: setup
    if: needs.setup.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Install conventional-changelog-cli if not using semantic-release
          npm install -g conventional-changelog-cli
          
          # Generate changelog from git history
          CHANGELOG=$(npx conventional-changelog -p angular -r 2)
          
          # Output the changelog using multiline delimiter syntax for GitHub Actions
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build:
    needs: [setup, generate-changelog]
    if: needs.setup.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build with GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/*
          retention-days: 1

  # Final job to create GitHub release with all artifacts
  release:
    needs: [setup, generate-changelog, build]
    runs-on: ubuntu-latest
    # Only run this job if we should create a release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setup.outputs.version }}
          name: Release ${{ needs.setup.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.deb
            dist/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Git tag if it doesn't exist
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Fetch all tags from remote
          git fetch --tags
          
          # Check if tag already exists in remote
          if git ls-remote --tags origin | grep -q "refs/tags/${{ needs.setup.outputs.version }}$"; then
            echo "Tag ${{ needs.setup.outputs.version }} already exists in remote. Skipping tag creation."
          else
            echo "Creating and pushing tag ${{ needs.setup.outputs.version }}..."
            git tag -a ${{ needs.setup.outputs.version }} -m "Release ${{ needs.setup.outputs.version }}"
            git push origin ${{ needs.setup.outputs.version }}
            echo "Tag ${{ needs.setup.outputs.version }} created and pushed successfully."
          fi
          
      - name: Update release documentation
        run: |
          echo "Release ${{ needs.setup.outputs.version }} published successfully!"
          echo "Binary artifacts are available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.setup.outputs.version }}"

